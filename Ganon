#/bin/bash
#aga's Ganon Pipeline
#
#USER NEEDS TO SPECIFY:

RUNDIR=Virusseq/fastq
OUTDIR=Ganon_05.02_fastq
Ganon_DB=databases/ganon_viruses_db
nodes=databases/nodes.dmp
#SAMPLESHEET="${5:-"$RUNDIR"/SampleSheet.csv}" 
BASEN=${RUNDIR##*/}


###
## PRINT CONFIGURATION
echo "[$(date)]: Running BOWTIE2 + SLIMM Pipeline with the following parameters:" >&2
echo "[$(date)]: RUNDIR = ${RUNDIR}" >&2
echo "[$(date)]: OUTPUTDIR = ${OUTDIR}" >&2
#echo "[$(date)]: SAMPLE_SHEET = ${SAMPLESHEET}" >&2
echo "[$(date)]: SLIMM_DATABASE = ${SLIMM_DB}" >&2
echo "[$(date)]: BOWTIE2_DATABASE = ${BOWTIE_DB}" >&2

### PREPARE THE SHELL 
echo "[$(date)]: Preparing shell." >&2
source activate slimm_aga_test #probably need to create other env for that
mkdir $OUTDIR
mkdir $OUTDIR/FLASH_OUTPUT
mkdir $OUTDIR/Ganon_out

###
## FIND ALL FASTQ FILES
FQ=$(find -L "${RUNDIR}" -name "*_R1*.fastq" -type f)
if [ -z "$FQ" ]; then
  echo "[$(date)]: No FASTQs found. Exiting..." >&2
  exit 0
else
   echo "[$(date)]: The number of reads: ls -l | wc -l" >&2 
   echo "[$(date)]: Found the following FASTQs:" >&2
   echo $FQ | sort | sed -e "s/gz /gz\n/g" | sed "s/\(^.\)/\t\1/g" >&2
fi

for FR1 in ${FQ}; do
   FR1N=${FR1##*/}
   SAMPLEN=${FR1N/_R1*/}
 
   
   ###1. Run Ganon 

   echo "[$(date)]: Ganon starts" >&2
   ganon classify -d ${Ganon_DB} -p ${FR1} ${FR1/_R1/_R2} -o $OUTDIR/Ganon_out/${SAMPLEN} -t 10
   echo "[$(date)]: Ganon done" >&2
done
   

   
   ####removing the FLASH files
   #rm $OUTDIR/FLASH_OUTPUT/${SAMPLEN}.extendedFrags.fastq
   #rm $OUTDIR/FLASH_OUTPUT/${SAMPLEN}.notCombined_1.fastq
   #rm $OUTDIR/FLASH_OUTPUT/${SAMPLEN}.notCombined_2.fastq

   

for FR1 in ${FQ}; do
   FR1N=${FR1##*/}
   SAMPLEN=${FR1N/_R1*/}
   ###5. Running FASTQC 
   echo "[$(date)]: Running FASTQC" >&2
   mkdir $OUTDIR/FASTQC_OUTPUT 
   fastqc -t 6 -o $OUTDIR/FASTQC_OUTPUT \
   --extract \
   --threads 22 \
   -- adapters /opt/resources/fastqc_contaminant_list.txt \
   --contaminants /opt/resources/fastqc_contaminant_list.txt \
   $OUTDIR/${SAMPLEN}.merged.bam.bam
   > $FQ.FASTQC.log 2> $FQ.FASTQC.err
   echo "[$(date)]: Fastqc finished" >&2
   
###6. Running multiqc
echo "[$(date)]: Starting multiqc" >&2
mkdir $OUTDIR/multiqc_output.${FQ}
multiqc $OUTDIR/FASTQC_OUTPUT . --interactive > OUTDIR/multiqc_output.${FQ}
echo "[$(date)]: Multiqc done" >&2
done 
